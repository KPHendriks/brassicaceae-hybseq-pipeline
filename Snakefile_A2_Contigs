configfile: "./envs/config_contigs.yaml"

SAMPLES = "S0275 S0277".split() #PJA296A PJA370-B PJA370-C
ORIGIN = "naturalis"

# variables for part 3:
var_variables = []
make_contig_consensus = []
blat_variables = []
for sample in SAMPLES:
    if sample in config:
        contig_nrs = config[sample]
        if not contig_nrs:
            print("not a single contig has been formed in: " + sample)
        elif contig_nrs:
            for nr in contig_nrs:
                var_variables.append("results/A04_mapped_contigs/{sample}/var/Contig{nr}_AT_sort.var".format(sample=sample, nr=nr))
                make_contig_consensus.append("results/A05_consensus_contigs/{sample}/Contig{nr}.fasta".format(sample=sample, nr=nr))
                blat_variables.append("results/A06_identified_contigs_blat/{sample}/contig{nr}_AT.psl".format(sample=sample, nr=nr))
    else:
        print(sample + " is not yet in config_contigs.yaml file. Part 2 has to be ran first for this sample.")

# variables for part 4:
calculate_avcov = []
extract_hits_psl = []
calc_mapped_reads = []
calc_contigs_formed = []
for sample in SAMPLES:
    calculate_avcov.append("results/A04_mapped_contigs/{sample}/var/{sample}_average_coverage.txt".format(sample=sample))
    extract_hits_psl.append("results/A07_mapped_exons/{sample}/stats/sequenced_exons.txt".format(sample=sample))
    calc_mapped_reads.append("results/A03_mapped_reads/{sample}/mapped_reads.txt".format(sample=sample))
    calc_contigs_formed.append("results/A03_mapped_reads/{sample}/contigs_formed.txt".format(sample=sample))

## rule all:
rule part3:
    input:
        var_variables,
        make_contig_consensus,
        blat_variables

rule part4:
    input:
       calculate_avcov,
       extract_hits_psl,
       calc_mapped_reads,
       calc_contigs_formed

## part 3:
rule convert_to_fBAM:
    input:
        "results/A04_mapped_contigs/{sample}/sam/Contig{nr}_AT.sam"
    output:
        temp("results/A04_mapped_contigs/{sample}/bam/Contig{nr}_AT.bam")
    shell:
        "samtools view -bS {input} > {output}"

rule sort_fBAM:
    input:
        "results/A04_mapped_contigs/{sample}/bam/Contig{nr}_AT.bam"
    output:
        temp("results/A04_mapped_contigs/{sample}/sorted_bam/Contig{nr}_AT_sort.bam")
    shell:
        "samtools sort -m5G {input} -o {output}"

rule convert_to_fpileup:
    input:
        "results/A04_mapped_contigs/{sample}/sorted_bam/Contig{nr}_AT_sort.bam"
    output:
        temp("results/A04_mapped_contigs/{sample}/pileup/Contig{nr}_AT_sort.pileup")
    shell:
        "samtools mpileup -B {input} > {output}"

rule SNP_calling:
    input:
        "results/A04_mapped_contigs/{sample}/pileup/Contig{nr}_AT_sort.pileup"
    output:
        "results/A04_mapped_contigs/{sample}/var/Contig{nr}_AT_sort.var"
    shell:
        "varscan pileup2cns {input} "
        "--min-freq-for-hom 0.6 "
        "--min-coverage 5 "
        "--min-var-freq 0.6 "
        "--p-value 0.1 "
        "--min-reads2 5 "
        "> {output}"

rule make_contig_consensus:
    input:
        script = "src/read_var.py",
        file = "results/A04_mapped_contigs/{sample}/var/Contig{nr}_AT_sort.var"
    output:
        "results/A05_consensus_contigs/{sample}/Contig{nr}.fasta"
    shell:
        "python3 {input.script} {input.file}"

rule BLAT_assembled:
    input:
        "data/exons/exons_AT.fasta",
        "results/A05_consensus_contigs/{sample}/Contig{nr}.fasta"
    output:
        "results/A06_identified_contigs_blat/{sample}/contig{nr}_AT.psl"
    shell:
        "blat "
        "-t=dnax "
        "-q=dnax "
        "-stepSize=5 "
        "-repMatch=2253 "
        "-minScore=0 "
        "-minIdentity=0 "
        "{input} {output}"

## part 4:
rule calculate_avcov:
    input:
        script = "src/calculate_average_coverage.py"
    output:
        "results/A04_mapped_contigs/{sample}/var/{sample}_average_coverage.txt"
    params:
        sample = "{sample}"
    shell:
        "python {input.script} {params.sample}"

rule extract_hits_psl:
    input:
        script = "src/extract_hits_psl.py"
        # file = "results/A06_identified_contigs_blat/{sample}/contig{nr}_AT.psl"
    output:
        "results/A07_mapped_exons/{sample}/stats/sequenced_exons.txt"
    params:
        sample = "{sample}"
    shell:
        "python {input.script} {params.sample}"

rule calculate_mapped_reads:
    input:
         file = "results/A03_mapped_reads/{sample}/YASRA_related_files/alignments_{sample}_reads.fq_ref-at.fasta.sam"
    output:
         file = "results/A03_mapped_reads/{sample}/mapped_reads.txt"
    shell:
        "cat {input.file} | grep '>' | wc -l > {output.file}"

rule calculate_contigs_formed:
    input:
         file = "results/A03_mapped_reads/{sample}/YASRA_related_files/Final_Assembly_{sample}_reads.fq_ref-at.fasta"
    output:
         file = "results/A03_mapped_reads/{sample}/contigs_formed.txt"
    shell:
         "cat {input.file} | grep '>' | wc -l > {output.file}"

